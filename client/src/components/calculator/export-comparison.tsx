import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Download, FileText, Share2, Mail, Printer, ExternalLink } from "lucide-react";
import type { FormData, CostBreakdown } from "@/lib/calculator";

interface ExportComparisonProps {
  formData: FormData;
  costBreakdown: CostBreakdown;
  vendors: any[];
}

interface ComparisonData {
  scenario: string;
  totalCost: number;
  breakdown: CostBreakdown;
  vendors: any[];
  savings?: number;
}

export default function ExportComparison({ formData, costBreakdown, vendors }: ExportComparisonProps) {
  const [showExportDialog, setShowExportDialog] = useState(false);
  const [selectedFormat, setSelectedFormat] = useState<'pdf' | 'excel' | 'csv'>('pdf');
  const [isExporting, setIsExporting] = useState(false);

  // Generate comparison scenarios
  const generateComparisons = (): ComparisonData[] => {
    const baseScenario: ComparisonData = {
      scenario: "Current Configuration",
      totalCost: costBreakdown.total,
      breakdown: costBreakdown,
      vendors: vendors.slice(0, 3)
    };

    const budgetScenario: ComparisonData = {
      scenario: "Budget Option",
      totalCost: costBreakdown.total * 0.75,
      breakdown: {
        ...costBreakdown,
        boothCost: costBreakdown.boothCost * 0.7,
        travelCost: costBreakdown.travelCost * 0.8,
        total: costBreakdown.total * 0.75
      },
      vendors: vendors.slice(0, 2),
      savings: costBreakdown.total * 0.25
    };

    const premiumScenario: ComparisonData = {
      scenario: "Premium Option",
      totalCost: costBreakdown.total * 1.4,
      breakdown: {
        ...costBreakdown,
        boothCost: costBreakdown.boothCost * 1.5,
        servicesCost: costBreakdown.servicesCost * 1.8,
        total: costBreakdown.total * 1.4
      },
      vendors: vendors.slice(0, 5)
    };

    return [baseScenario, budgetScenario, premiumScenario];
  };

  const comparisons = generateComparisons();

  const handleExport = async (format: 'pdf' | 'excel' | 'csv') => {
    setIsExporting(true);
    try {
      const response = await fetch('/api/export/comparison', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          format,
          formData,
          comparisons,
          vendors
        }),
      });

      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `exhibition-cost-comparison.${format}`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      }
    } catch (error) {
      console.error('Export failed:', error);
    } finally {
      setIsExporting(false);
      setShowExportDialog(false);
    }
  };

  const shareViaEmail = () => {
    const subject = encodeURIComponent(`Exhibition Cost Analysis - ${formData.destinationCity}`);
    const body = encodeURIComponent(`
      Exhibition Cost Analysis for ${formData.destinationCity}
      
      Current Configuration: ₹${costBreakdown.total.toLocaleString()}
      Budget Option: ₹${(costBreakdown.total * 0.75).toLocaleString()} (25% savings)
      Premium Option: ₹${(costBreakdown.total * 1.4).toLocaleString()}
      
      Generated by EaseMyExpo - AI-powered exhibition cost calculator
    `);
    
    window.location.href = `mailto:?subject=${subject}&body=${body}`;
  };

  return (
    <>
      <Card className="bg-gray-800/50 border-gray-700 backdrop-blur-sm">
        <CardHeader>
          <div className="flex items-center gap-3">
            <FileText className="w-5 h-5 text-green-400" />
            <CardTitle className="text-white">Vendor Comparison Report</CardTitle>
          </div>
          <CardDescription className="text-gray-400">
            Compare scenarios and export detailed cost analysis
          </CardDescription>
        </CardHeader>
        
        <CardContent className="space-y-6">
          {/* Comparison Scenarios */}
          <div className="grid gap-4">
            {comparisons.map((comparison, index) => (
              <div 
                key={index}
                className={`p-4 rounded-lg border transition-all ${
                  index === 0 ? 'bg-blue-900/20 border-blue-700/50' :
                  index === 1 ? 'bg-green-900/20 border-green-700/50' :
                  'bg-purple-900/20 border-purple-700/50'
                }`}
              >
                <div className="flex justify-between items-start mb-3">
                  <div>
                    <h3 className="text-white font-medium">{comparison.scenario}</h3>
                    <div className="text-2xl font-bold text-white mt-1">
                      ₹{comparison.totalCost.toLocaleString()}
                    </div>
                  </div>
                  <div className="text-right">
                    {comparison.savings && (
                      <Badge variant="secondary" className="bg-green-900/50 text-green-300">
                        Save ₹{comparison.savings.toLocaleString()}
                      </Badge>
                    )}
                    <div className="text-gray-400 text-sm mt-1">
                      {comparison.vendors.length} vendors
                    </div>
                  </div>
                </div>

                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                  <div>
                    <span className="text-gray-400 block">Booth</span>
                    <span className="text-white">₹{comparison.breakdown.boothCost.toLocaleString()}</span>
                  </div>
                  <div>
                    <span className="text-gray-400 block">Travel</span>
                    <span className="text-white">₹{comparison.breakdown.travelCost.toLocaleString()}</span>
                  </div>
                  <div>
                    <span className="text-gray-400 block">Services</span>
                    <span className="text-white">₹{comparison.breakdown.servicesCost.toLocaleString()}</span>
                  </div>
                  <div>
                    <span className="text-gray-400 block">Marketing</span>
                    <span className="text-white">₹{comparison.breakdown.marketingCost.toLocaleString()}</span>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* Export Actions */}
          <div className="flex flex-wrap gap-3">
            <Button 
              onClick={() => setShowExportDialog(true)}
              className="bg-green-600 hover:bg-green-700"
              data-testid="button-export-comparison"
            >
              <Download className="w-4 h-4 mr-2" />
              Export Report
            </Button>
            
            <Button 
              variant="outline"
              onClick={shareViaEmail}
              className="border-blue-600 text-blue-400 hover:bg-blue-600 hover:text-white"
              data-testid="button-share-email"
            >
              <Mail className="w-4 h-4 mr-2" />
              Share via Email
            </Button>

            <Button 
              variant="outline"
              onClick={() => window.print()}
              className="border-gray-600 text-gray-300 hover:bg-gray-700"
              data-testid="button-print-comparison"
            >
              <Printer className="w-4 h-4 mr-2" />
              Print
            </Button>

            <Button 
              variant="outline"
              onClick={() => {
                if (navigator.share) {
                  navigator.share({
                    title: 'Exhibition Cost Analysis',
                    text: `Exhibition costs for ${formData.destinationCity}: ₹${costBreakdown.total.toLocaleString()}`,
                    url: window.location.href
                  });
                }
              }}
              className="border-purple-600 text-purple-400 hover:bg-purple-600 hover:text-white"
              data-testid="button-share-native"
            >
              <Share2 className="w-4 h-4 mr-2" />
              Share
            </Button>
          </div>

          {/* Quick Stats */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-gray-700/30 rounded-lg">
            <div className="text-center">
              <div className="text-white font-bold text-lg">₹{(costBreakdown.total * 0.25).toLocaleString()}</div>
              <div className="text-gray-400 text-sm">Potential Savings</div>
            </div>
            <div className="text-center">
              <div className="text-white font-bold text-lg">{vendors.length}</div>
              <div className="text-gray-400 text-sm">Vendor Options</div>
            </div>
            <div className="text-center">
              <div className="text-white font-bold text-lg">3</div>
              <div className="text-gray-400 text-sm">Scenarios</div>
            </div>
            <div className="text-center">
              <div className="text-white font-bold text-lg">5min</div>
              <div className="text-gray-400 text-sm">Setup Time</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Export Dialog */}
      <Dialog open={showExportDialog} onOpenChange={setShowExportDialog}>
        <DialogContent className="bg-gray-800 border-gray-700">
          <DialogHeader>
            <DialogTitle className="text-white">Export Comparison Report</DialogTitle>
          </DialogHeader>
          
          <div className="space-y-6">
            <div>
              <h4 className="text-white font-medium mb-3">Select Format</h4>
              <div className="grid grid-cols-3 gap-3">
                <Button
                  variant={selectedFormat === 'pdf' ? 'default' : 'outline'}
                  onClick={() => setSelectedFormat('pdf')}
                  className="flex flex-col items-center p-4 h-auto"
                  data-testid="button-format-pdf"
                >
                  <FileText className="w-6 h-6 mb-2" />
                  PDF Report
                </Button>
                <Button
                  variant={selectedFormat === 'excel' ? 'default' : 'outline'}
                  onClick={() => setSelectedFormat('excel')}
                  className="flex flex-col items-center p-4 h-auto"
                  data-testid="button-format-excel"
                >
                  <ExternalLink className="w-6 h-6 mb-2" />
                  Excel Spreadsheet
                </Button>
                <Button
                  variant={selectedFormat === 'csv' ? 'default' : 'outline'}
                  onClick={() => setSelectedFormat('csv')}
                  className="flex flex-col items-center p-4 h-auto"
                  data-testid="button-format-csv"
                >
                  <Download className="w-6 h-6 mb-2" />
                  CSV Data
                </Button>
              </div>
            </div>

            <div className="p-4 bg-gray-700/30 rounded-lg">
              <h5 className="text-white font-medium mb-2">Report Includes:</h5>
              <ul className="text-gray-300 text-sm space-y-1">
                <li>• Complete cost breakdown for all scenarios</li>
                <li>• Vendor recommendations with contact details</li>
                <li>• Market analysis and pricing trends</li>
                <li>• Seasonal pricing adjustments</li>
                <li>• AI-powered cost predictions</li>
              </ul>
            </div>

            <div className="flex gap-3">
              <Button 
                onClick={() => handleExport(selectedFormat)}
                disabled={isExporting}
                className="bg-green-600 hover:bg-green-700 flex-1"
                data-testid="button-export-confirm"
              >
                {isExporting ? 'Exporting...' : `Export ${selectedFormat.toUpperCase()}`}
              </Button>
              <Button 
                variant="outline" 
                onClick={() => setShowExportDialog(false)}
                className="border-gray-600 text-gray-300"
                data-testid="button-export-cancel"
              >
                Cancel
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}