// calc.js
const SQFT_PER_SQM = 10.7639;

function round2(n) {
  return Math.round((n + Number.EPSILON) * 100) / 100;
}

function toSqm(areaValue, unit) {
  if (!areaValue || areaValue <= 0) throw new Error("areaValue must be > 0");
  if (unit === "sqm") return areaValue;
  if (unit === "sqft") return areaValue / SQFT_PER_SQM;
  throw new Error('areaUnit must be "sqm" or "sqft"');
}

/**
 * Calculate exhibition participation cost.
 * Any bucket can be given as a flat total; if omitted, rates are used (when provided).
 *
 * @param {Object} p inputs
 * @returns {Object} detailed result
 */
function calculateCost(p) {
  // 1) Normalize area
  const area_sqm = toSqm(p.area.value, p.area.unit);
  const area_sqft = area_sqm * SQFT_PER_SQM;

  // 2) SPACE (flat or rate)
  const space_flat = num(p.space?.flat);
  const space_from_rate =
    safeMul(num(p.space?.rate_per_sqm), area_sqm) *
    (1 + pct(num(p.space?.location_premium_pct)));
  const space = pick(space_flat, space_from_rate);

  // 3) CONSTRUCTION (flat or rate×area×finish)
  const cons_flat = num(p.construction?.flat);
  const finish_factor = p.construction?.finish_factor ? Math.max(0, p.construction.finish_factor) : 1;
  const cons_from_rate =
    safeMul(num(p.construction?.rate_per_sqm), area_sqm) * finish_factor;
  const construction = pick(cons_flat, cons_from_rate);

  // 4) UTILITIES
  const utilities =
    safeMul(num(p.utilities?.power_kW), num(p.utilities?.power_rate)) +
    num(p.utilities?.internet) +
    num(p.utilities?.water) +
    num(p.utilities?.furniture) +
    num(p.utilities?.other);

  // 5) LOGISTICS (flat or composed)
  const log_flat = num(p.logistics?.flat);
  const log_from_parts =
    safeMul(num(p.logistics?.weight_kg), num(p.logistics?.rate_per_kg)) +
    safeMul(num(p.logistics?.cbm), num(p.logistics?.rate_per_cbm)) +
    safeMul(num(p.logistics?.route_km), num(p.logistics?.rate_per_km));
  const logistics = pick(log_flat, log_from_parts);

  // 6) TRAVEL
  const team = Math.max(0, p.travel?.team_count || 0);
  const nights = Math.max(0, p.travel?.nights || 0);
  const airfare_pp = num(p.travel?.airfare_per_person);
  const adr = num(p.travel?.hotel_adr);
  const local_per_day = num(p.travel?.local_transport_per_day);
  const meals_per_day = num(p.travel?.meals_per_person_per_day);
  const travel =
    safeMul(team, airfare_pp) +
    safeMul(team, nights * (adr + local_per_day + meals_per_day));

  // 7) STAFF & OPS
  const promoters = Math.max(0, p.staff_ops?.promoters || 0);
  const promoter_days = Math.max(0, p.staff_ops?.promoter_days || 0);
  const promoter_rate = num(p.staff_ops?.promoter_rate_per_day);
  const uniforms = num(p.staff_ops?.uniforms);
  const ops_misc = num(p.staff_ops?.ops_misc);
  const staff_ops =
    safeMul(promoters, promoter_days * promoter_rate) + uniforms + ops_misc;

  // 8) MARKETING
  const marketing =
    num(p.marketing?.print) +
    num(p.marketing?.giveaways) +
    num(p.marketing?.digital) +
    num(p.marketing?.av) +
    num(p.marketing?.other);

  // 9) Subtotal before taxes/contingency
  const subtotal =
    space + construction + utilities + logistics + travel + staff_ops + marketing;

  // 10) TAX (GST) — choose what’s taxable
  const gst_rate = pct(num(p.tax?.gst_pct ?? 0));
  const taxableBuckets = {
    space: bool(p.tax?.tax_space),
    construction: bool(p.tax?.tax_construction),
    utilities: bool(p.tax?.tax_utilities),
    logistics: bool(p.tax?.tax_logistics),
    travel: bool(p.tax?.tax_travel),
    staff_ops: bool(p.tax?.tax_staff_ops),
    marketing: bool(p.tax?.tax_marketing),
  };
  const taxableAmount =
    (taxableBuckets.space ? space : 0) +
    (taxableBuckets.construction ? construction : 0) +
    (taxableBuckets.utilities ? utilities : 0) +
    (taxableBuckets.logistics ? logistics : 0) +
    (taxableBuckets.travel ? travel : 0) +
    (taxableBuckets.staff_ops ? staff_ops : 0) +
    (taxableBuckets.marketing ? marketing : 0);

  const tax_total = taxableAmount * gst_rate;

  // 11) Contingency (choose base: pre-tax or post-tax)
  const contingency_rate = pct(num(p.contingency?.pct ?? 0));
  const contingency_base =
    p.contingency?.apply_on === "post_tax" ? subtotal + tax_total : subtotal;
  const contingency_total = contingency_base * contingency_rate;

  // 12) Grand totals
  const grand_total = subtotal + tax_total + contingency_total;

  // 13) Per-area pricing
  const per_sqm = grand_total / area_sqm;
  const per_sqft = grand_total / area_sqft;

  return {
    area_sqm: round2(area_sqm),
    area_sqft: round2(area_sqft),
    breakdown: {
      space: round2(space),
      construction: round2(construction),
      utilities: round2(utilities),
      logistics: round2(logistics),
      travel: round2(travel),
      staff_ops: round2(staff_ops),
      marketing: round2(marketing),
      subtotal: round2(subtotal),
      tax_total: round2(tax_total),
      contingency_total: round2(contingency_total),
    },
    totals: {
      grand_total: round2(grand_total),
      cost_per_sqm: round2(per_sqm),
      cost_per_sqft: round2(per_sqft),
    },
  };
}

// Helpers
function num(v) {
  const n = Number(v || 0);
  if (!isFinite(n) || n < 0) return 0;
  return n;
}
function pct(v) {
  if (!isFinite(v) || v <= 0) return 0;
  return v / 100;
}
function bool(v) {
  return !!v;
}
function safeMul(a, b) {
  if (!a || !b) return 0;
  return a * b;
}
function pick(flat, computed) {
  // Prefer flat if provided (>0), else computed, else 0
  return flat > 0 ? flat : (computed > 0 ? computed : 0);
}

module.exports = { calculateCost };
